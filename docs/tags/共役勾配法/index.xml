<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>共役勾配法 on 数値実験部屋</title>
    <link>https://kitano-AppMath.github.io/kitano_blog/tags/%E5%85%B1%E5%BD%B9%E5%8B%BE%E9%85%8D%E6%B3%95/</link>
    <description>Recent content in 共役勾配法 on 数値実験部屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Feb 2023 23:38:01 +0900</lastBuildDate><atom:link href="https://kitano-AppMath.github.io/kitano_blog/tags/%E5%85%B1%E5%BD%B9%E5%8B%BE%E9%85%8D%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>共役勾配法</title>
      <link>https://kitano-AppMath.github.io/kitano_blog/posts/2023-02-19/</link>
      <pubDate>Sun, 19 Feb 2023 23:38:01 +0900</pubDate>
      
      <guid>https://kitano-AppMath.github.io/kitano_blog/posts/2023-02-19/</guid>
      <description>目次 共役勾配法の概要 経緯と概要 共役勾配法を利用するメリット 共役勾配法のアルゴリズム ２つのストーリー 共役勾配法を構成する 解の特徴づけ 直交化 共役勾配法を俯瞰する Krylov部分空間法 直交化 共役勾配法の位置づけ 数値実験 例１：密行列の場合 例２：疎行列の場合 共役勾配法の概要 経緯と概要 共役勾配法（conjugate gradeint method）はHestenesとStiefel1によって提案された連立一次方程式の数値解法で，CG法とも呼ばれる．発表当初から大々的に報道されたようで，&amp;ldquo;数値計算法の一解法が, これほど大々的に報道されたことは, 前にも後にも例がない&amp;quot;との記述も2．1980年代にはKrylov部分空間法として再定式化されたことでも有名．ちなみにKrylov部分空間法は20世紀のトップ10アルゴリズムの１つである．この記事では，共役勾配法はどこから来たのか，何がすごいのか，そして，Krylov部分空間法とは何者か簡単に説明する．実験に使ったJuliaプログラムはこちら．
共役勾配法を利用するメリット 共役勾配法はなぜこれほどまで注目されたのだろうか．この解法の特に優れた点を以下に挙げてみよう．
原理的には ，有限回の反復で厳密解に収束する 行列の全成分を知らなくても, 行列-ベクトル積が分かれば アルゴリズム自体は動く fill inを回避できる（＝行列の疎性が壊れない） １点目に関して補足すると，理論上は$n\times n$の係数行列に対して$n$回の反復で収束するが，実際の計算では丸め誤差の影響で，収束により多くの反復を要する ことがある．２点目に関しては，極論，係数行列の中身が分からなくても良い．とにかくベクトル行列式を計算する関数さえ定義できれば良いのだ．３点目に関して，fill inとは，係数行列の零成分が反復の途中で非零になる現象を指す．非零になった分メモリを確保する必要があり，余計にコストがかかるため，fill inは嬉しくない現象である．まあとにかく，共役勾配法を使わない手はない！（Juliaのデフォルトのソルバーは優秀なので自分でコードを組むことは少ないかもしれない．なお，共役勾配法を含むKrylob部分空間法を基にした数値解法を実装したパッケージは充実している模様．）
共役勾配法のアルゴリズム 詳細に入る前に，共役勾配法のアルゴリズムを示しておこう．
定義（共役勾配法） 共役勾配法とは，$n$次正方行列$A$，$n$次元ベクトル$b$に対して，連立一次方程式$Ax=b$の近似解列$\left\{ x_n \right\}_{n=0}^{\infty}$を次のように生成する方法を指す．
Initialize $x_0$, and set $r_0=b-Ax_0$ and $p_0=r_0$. for $k=0, 1, \dots$ do
&amp;emsp;Update $\alpha_k = \frac{r_{k}^\top p_k}{p_k^{\top} Ap_k}$. &amp;emsp;Update $x_{k+1} = x_k + \alpha_k p_k$. &amp;emsp;Update $r_{k+1} = b - Ax_{k+1}$.</description>
    </item>
    
  </channel>
</rss>
